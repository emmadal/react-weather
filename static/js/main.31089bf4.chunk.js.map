{"version":3,"sources":["components/index.js","InfosWeather.js","InputForm.js","App.js","serviceWorker.js","index.js"],"names":["Button","styled","button","Input","input","H1","h1","InfosWeather","props","weather","name","country","sys","speed","wind","main","humidity","temp","length","Fragment","src","alt","title","description","className","icon","override","css","InputForm","useState","city","setCity","setWeather","loading","setLoading","handleSubmit","e","a","preventDefault","axios","get","data","status","onSubmit","type","placeholder","onChange","target","value","disabled","color","style","width","height","size","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.31089bf4.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nconst Button = styled.button`\n  color: palevioletred;\n  font-size: 1em;\n  margin: 0.3em;\n  padding: 0.7em 1.2em;\n  border: 2px solid palevioletred;\n  border-radius: 3px;\n  color: palevioletred;\n  background: white;\n`;\n\nconst Input = styled.input`\n  font-size: 1em;\n  margin: 1em;\n  padding: 0.7em 2em;\n  border: 2px solid palevioletred;\n  border-radius: 3px;\n  color: palevioletred;\n  background: white;\n`;\n\nconst H1 = styled.h1`\n  font-size: 3.8em;\n  font-family: \"Dancing Script\", \"cursive\";\n  text-align: center;\n  color: palevioletred;\n  font-weight: bold;\n`;\n\nexport { Button, Input, H1 };\n","import React from \"react\";\nimport \"./App.css\";\n\nexport default function InfosWeather(props) {\n  const {\n    name,\n    sys: { country },\n    wind: { speed },\n    main: { humidity, temp },\n  } = props.weather;\n\n  if (name.length > 0) {\n    return (\n      <React.Fragment>\n        <h2>{`${name}, ${country}`}</h2>\n        {country ? (\n          <img\n            src={`https://www.countryflags.io/${country}/flat/64.png`}\n            alt={country}\n            title={country}\n          />\n        ) : null}\n        <h4>\n          Wind : {speed} km/h, Humidity : {humidity} %, Description :{\" \"}\n          {props.weather.weather[0].description}\n        </h4>\n        <div className=\"temp\">\n          <h1>{`${temp}Â° C`}</h1>\n          <img\n            src={`https://openweathermap.org/img/wn/${props.weather.weather[0].icon}@2x.png`}\n            alt={`${props.weather.weather[0].description}`}\n          />\n        </div>\n      </React.Fragment>\n    );\n  }\n  return null;\n}\n","import React, { useState } from \"react\";\nimport { Button, Input } from \"./components\";\nimport { PulseLoader } from \"react-spinners\";\nimport { css } from \"@emotion/core\";\nimport InfosWeather from \"./InfosWeather\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\nconst baseUrl = \"http://api.openweathermap.org/data/2.5/\";\nconst override = css`\n  display: block;\n  margin: 30px;\n  border-color: palevioletred;\n`;\n\nexport const InputForm = () => {\n  const [city, setCity] = useState(\"\");\n  const [weather, setWeather] = useState({\n    name: \"\",\n    sys: \"\",\n    wind: \"\",\n    main: \"\",\n  });\n  const [loading, setLoading] = useState(false);\n\n  const handleInput = (e) => {\n    setCity(e.target.value);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    const data = await axios.get(\n      `${baseUrl}/weather?q=${city}&appid=bb4e4521bac8ebbd490409df984094ef&units=metric`\n    );\n    data.status === 200 ? setLoading(false) : setLoading(true);\n    setWeather({ ...data.data });\n  };\n\n  return (\n    <React.Fragment>\n      <form onSubmit={handleSubmit}>\n        <Input\n          type=\"text\"\n          placeholder=\"City (Ex: Abidjan)\"\n          onChange={handleInput}\n          value={city}\n          name=\"city\"\n        />\n        <Button type=\"submit\" disabled={city.length < 3}>\n          Search\n        </Button>\n      </form>\n      <hr color=\"#2b303b\" style={{ width: \"50%\", height: \"0.03em\" }} />\n      {loading ? (\n        <PulseLoader size={60} color={\"palevioletred\"} css={override} />\n      ) : (\n        <InfosWeather weather={weather} />\n      )}\n    </React.Fragment>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { InputForm } from \"./InputForm\";\nimport { H1 } from './components'\n\nfunction App() {\n  return (\n    <div className=\"App-header\">\n      <H1>React weather </H1>\n      <InputForm />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}